#!/usr/bin/env bash
# ----------------------------------------------------------
# Upgrade direct dependencies/devDependencies to the new
# versions whose peer-dependency ranges match those in
# package.json, except packages listed in "overrides"
# (force-bump).  If react and react-dom land on different
# major.minor versions, this script now *automatically*
# realigns them to the lower common major.minor to avoid
# ERESOLVE errors.
# ----------------------------------------------------------

set -euo pipefail
trap 'rm -f "$TMP1" "$TMP2"' EXIT

# ─────────────────────────────────────────────────────────────
# 0. Locate project root by walking up to package-lock.json
# ─────────────────────────────────────────────────────────────
find_root() {
    local dir="$PWD"
    while [[ "$dir" != "/" ]]; do
        [[ -f "$dir/package-lock.json" ]] && { cd "$dir"; return; }
        dir="$(dirname "$dir")"
    done
    echo "Error: package-lock.json not found — cannot locate project root." >&2
    exit 1
}
find_root

# ─────────────────────────────────────────────────────────────
# Prerequisites
# ─────────────────────────────────────────────────────────────
command -v jq  >/dev/null || { echo "Error: jq is required";  exit 1; }
command -v npm >/dev/null || { echo "Error: npm is required"; exit 1; }

section() { printf "\n=== %s ===\n" "$1"; }

# ─────────────────────────────────────────────────────────────
# 1. Pull list of packages in "overrides"
# ─────────────────────────────────────────────────────────────
readarray -t OVERRIDE_PKGS < <(jq -r '.overrides? | keys[]' package.json 2>/dev/null || true)

# ─────────────────────────────────────────────────────────────
# 2. Collect all direct deps / devDeps
# ─────────────────────────────────────────────────────────────
section "Detecting current direct dependencies"
readarray -t ALL_PKGS < <(
  jq -r '(.dependencies // {}) + (.devDependencies // {}) | keys[]' package.json | sort -u
)

TMP1=package.json.tmp
TMP2=package.json.tmp2
cp package.json "$TMP1"
changed=false

# ─────────────────────────────────────────────────────────────
# 3. Upgrade pass
# ─────────────────────────────────────────────────────────────
for PKG in "${ALL_PKGS[@]}"; do
    CUR=$(jq -r ".dependencies[\"$PKG\"] // .devDependencies[\"$PKG\"]" package.json)
    LATEST=$(npm view "$PKG" version 2>/dev/null || true)
    [[ -z "$LATEST" ]] && continue

    # Force-bump if in overrides
    if printf '%s\n' "${OVERRIDE_PKGS[@]}" | grep -qx "$PKG"; then
    printf '%-30s override → %s\n' "$PKG" "$LATEST"
    jq --arg p "$PKG" --arg v "^$LATEST" '
        if   .dependencies[$p]?    then .dependencies[$p]=$v
        elif .devDependencies[$p]? then .devDependencies[$p]=$v
        else . end' "$TMP1" >"$TMP2" && mv "$TMP2" "$TMP1"
    changed=true
    continue
    fi

    # Already satisfied?
    npx semver -r "$CUR" "$LATEST" >/dev/null 2>&1 && continue
    printf '%-30s candidate %s\n' "$PKG" "$LATEST"

    # Peer gate
    PEER=$(npm view "$PKG@$LATEST" peerDependencies --json 2>/dev/null || echo '{}')
    ok=true
    if [[ "$PEER" != "null" && "$PEER" != "{}" ]]; then
    while IFS=@ read -r PD_PKG PD_RANGE; do
      INST=$(jq -r ".dependencies[\"$PD_PKG\"] // .devDependencies[\"$PD_PKG\"] // empty" package.json)
        [[ -z "$INST" ]] && continue
        npx semver -r "$PD_RANGE" "$INST" >/dev/null 2>&1 || ok=false
    done < <(echo "$PEER" | jq -r 'to_entries[] | "\(.key)@\(.value)"')
    fi
    [[ $ok == false ]] && continue

    jq --arg p "$PKG" --arg v "^$LATEST" '
        if   .dependencies[$p]?    then .dependencies[$p]=$v
        elif .devDependencies[$p]? then .devDependencies[$p]=$v
        else . end' "$TMP1" >"$TMP2" && mv "$TMP2" "$TMP1"
    changed=true
done

# ─────────────────────────────────────────────────────────────
# 4. Auto-align react / react-dom (lower common major.minor)
# ─────────────────────────────────────────────────────────────
mm() { echo "$1" | grep -oE '[0-9]+\.[0-9]+' | head -1; }

R_ACT=$(jq -r '.dependencies.react // .devDependencies.react // empty' "$TMP1")
R_DOM=$(jq -r '.dependencies["react-dom"] // .devDependencies["react-dom"] // empty' "$TMP1")

if [[ -n "$R_ACT" && -n "$R_DOM" && "$(mm "$R_ACT")" != "$(mm "$R_DOM")" ]]; then
    # lower of the two
    if [[ "$(mm "$R_ACT")" < "$(mm "$R_DOM")" ]]; then
    TARGET="$R_ACT"
    else
    TARGET="$R_DOM"
    fi
    echo "react/react-dom mismatch → aligning both to ${TARGET}"
    jq --arg v "$TARGET" '
    if .dependencies.react?        then .dependencies.react=$v        else . end
    | if .devDependencies.react?   then .devDependencies.react=$v     else . end
    | if .dependencies["react-dom"]? then .dependencies["react-dom"]=$v else . end
    | if .devDependencies["react-dom"]? then .devDependencies["react-dom"]=$v else . end
    ' "$TMP1" >"$TMP2" && mv "$TMP2" "$TMP1"
    changed=true
fi

# ─────────────────────────────────────────────────────────────
# 5. Write back & install
# ─────────────────────────────────────────────────────────────
if $changed; then
    mv "$TMP1" package.json
    section "Installing updated packages"
else
    rm "$TMP1"
    echo "No compatible upgrades found."
fi

section "Running npm install (legacy-peer-deps → force)"
npm install --legacy-peer-deps || npm install --force
npm dedupe

# ─────────────────────────────────────────────────────────────
# 6. Final audit
# ─────────────────────────────────────────────────────────────
section "npm audit --omit=dev"
npm audit --omit=dev || echo "⚠️  audit warnings remain."

